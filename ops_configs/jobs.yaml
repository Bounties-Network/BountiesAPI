apiVersion: v1
items:
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: gettokenvalues
    namespace: default
  spec:
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    jobTemplate:
      metadata:
      spec:
        template:
          metadata:
          spec:
            containers:
            - args:
              - bash
              - -c
              - python3 manage.py get_token_values
              env:
              - name: redis_location
                valueFrom:
                  secretKeyRef:
                    key: redis_location
                    name: cacheprod
              - name: psql_host
                valueFrom:
                  secretKeyRef:
                    key: psql_host
                    name: psqlprod
              - name: psql_password
                valueFrom:
                  secretKeyRef:
                    key: psql_password
                    name: psqlprod
              - name: psql_port
                valueFrom:
                  secretKeyRef:
                    key: psql_port
                    name: psqlprod
              - name: psql_user
                valueFrom:
                  secretKeyRef:
                    key: psql_user
                    name: psqlprod
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    key: AWS_ACCESS_KEY_ID
                    name: awscreds
              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    key: AWS_SECRET_ACCESS_KEY
                    name: awscreds
              - name: django_secret
                valueFrom:
                  secretKeyRef:
                    key: django_secret
                    name: djangosecretprod
              - name: rollbar_token
                valueFrom:
                  secretKeyRef:
                    key: rollbar_token
                    name: rollbar
              - name: slack_token
                valueFrom:
                  secretKeyRef:
                    key: slack_token
                    name: slack
              - name: queue_url
                valueFrom:
                  secretKeyRef:
                    key: queue_url
                    name: sqs
              - name: eth_network
                valueFrom:
                  secretKeyRef:
                    key: eth_network
                    name: network
              image: consensysbounties/std_bounties:25
              imagePullPolicy: Always
              name: gettokenvalues
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: OnFailure
            schedulerName: default-scheduler
            securityContext: {}
            terminationGracePeriodSeconds: 30
    schedule: '*/5 * * * *'
    successfulJobsHistoryLimit: 3
    suspend: false
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: sqljobshourly
    namespace: default
  spec:
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    jobTemplate:
      metadata:
      spec:
        template:
          metadata:
          spec:
            containers:
            - args:
              - bash
              - -c
              - for f in hourly/*.sql; do psql -h $psql_host -p $psql_port -U $psql_user
                -d bounties -b -f $f; done;
              env:
              - name: psql_host
                valueFrom:
                  secretKeyRef:
                    key: psql_host
                    name: psqlprod
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    key: psql_password
                    name: psqlprod
              - name: psql_port
                valueFrom:
                  secretKeyRef:
                    key: psql_port
                    name: psqlprod
              - name: psql_user
                valueFrom:
                  secretKeyRef:
                    key: psql_user
                    name: psqlprod
              image: consensysbounties/sql_jobs:3
              imagePullPolicy: Always
              name: psqljobs
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: OnFailure
            schedulerName: default-scheduler
            securityContext: {}
            terminationGracePeriodSeconds: 30
    schedule: 0 * * * *
    successfulJobsHistoryLimit: 3
    suspend: false
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: staginggettokenvalues
    namespace: default
  spec:
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    jobTemplate:
      metadata:
      spec:
        template:
          metadata:
          spec:
            containers:
            - args:
              - bash
              - -c
              - python3 manage.py get_token_values
              env:
              - name: redis_location
                valueFrom:
                  secretKeyRef:
                    key: redis_location
                    name: cachestaging
              - name: psql_host
                valueFrom:
                  secretKeyRef:
                    key: psql_host
                    name: psqlstaging
              - name: psql_password
                valueFrom:
                  secretKeyRef:
                    key: psql_password
                    name: psqlstaging
              - name: psql_port
                valueFrom:
                  secretKeyRef:
                    key: psql_port
                    name: psqlstaging
              - name: psql_user
                valueFrom:
                  secretKeyRef:
                    key: psql_user
                    name: psqlstaging
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    key: AWS_ACCESS_KEY_ID
                    name: awscreds
              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    key: AWS_SECRET_ACCESS_KEY
                    name: awscreds
              - name: django_secret
                valueFrom:
                  secretKeyRef:
                    key: django_secret
                    name: djangosecretprod
              - name: rollbar_token
                valueFrom:
                  secretKeyRef:
                    key: rollbar_token
                    name: rollbar
              - name: slack_token
                valueFrom:
                  secretKeyRef:
                    key: slack_token
                    name: slack
              - name: queue_url
                valueFrom:
                  secretKeyRef:
                    key: queue_url
                    name: sqsstaging
              - name: eth_network
                valueFrom:
                  secretKeyRef:
                    key: eth_network
                    name: rinkebynetwork
              image: consensysbounties/std_bounties:25
              imagePullPolicy: Always
              name: staginggettokenvalues
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: OnFailure
            schedulerName: default-scheduler
            securityContext: {}
            terminationGracePeriodSeconds: 30
    schedule: '*/5 * * * *'
    successfulJobsHistoryLimit: 3
    suspend: false
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: stagingsqljobshourly
    namespace: default
  spec:
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    jobTemplate:
      metadata:
      spec:
        template:
          metadata:
          spec:
            containers:
            - args:
              - bash
              - -c
              - for f in hourly/*.sql; do psql -h $psql_host -p $psql_port -U $psql_user
                -d bounties -b -f $f; done;
              env:
              - name: psql_host
                valueFrom:
                  secretKeyRef:
                    key: psql_host
                    name: psqlstaging
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    key: psql_password
                    name: psqlstaging
              - name: psql_port
                valueFrom:
                  secretKeyRef:
                    key: psql_port
                    name: psqlstaging
              - name: psql_user
                valueFrom:
                  secretKeyRef:
                    key: psql_user
                    name: psqlstaging
              image: consensysbounties/sql_jobs:3
              imagePullPolicy: Always
              name: stagingpsqljobs
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: OnFailure
            schedulerName: default-scheduler
            securityContext: {}
            terminationGracePeriodSeconds: 30
    schedule: 0 * * * *
    successfulJobsHistoryLimit: 3
    suspend: false
