---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: logging
  namespace: production

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: logging
  namespace: production
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - list
  - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: logging
roleRef:
  kind: ClusterRole
  name: logging
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: logging
  namespace: production
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: logging
  namespace: production
  labels:
    k8s-app: logging
    version: v1
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: logging
        version: v1
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccount: logging
      serviceAccountName: logging
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - args: [/bin/sh, /logging/local.sh]
        name: logging
        env:
        - name: AWS_DEFAULT_REGION
          value: us-east-1
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: awscreds
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: awscreds
        image: consensysbounties/loggingservice
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
