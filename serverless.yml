service: bountiesapi

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}

  # wsgi:
  #   app: serverless_django.wsgi.application
custom: 
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    useDownloadCache: true
    useStaticCache: true
  serverless-offline:
    debug: true
  variables: ${file(./variables.yml)}
  prod:
    blacklist_rate: rate(5 minute)
  dev:
    blacklist_rate: rate(1 minute)

plugins:
  - serverless-python-requirements
  - serverless-offline
  # - serverless-offline-python
  - serverless-offline-scheduler
  # - serverless-wsgi

functions:
  resolve_blacklist:
    handler: bounties_api/serverless.resolve_blacklist
    environment: ${self:custom.variables}
    events:
       - schedule: ${self:custom.${self:provider.stage}.blacklist_rate}
       # - schedule: ${self:custom{environment}:blacklist_rate}

  # api:
  #   environment: ${self:custom.variables}
  #   handler: wsgi.handler
  #   events:
  #     - http: ANY /
  #         # integration: lambda
  #     - http: ANY {proxy+}
  # migrate:
  #   environment: ${self:custom.variables}
  #   handler: migrate.handler


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
